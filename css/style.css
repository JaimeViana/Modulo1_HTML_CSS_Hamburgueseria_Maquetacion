@import url(reset.css); /*importamos otra hoja de css a través de una ruta relativa*/
@import url('https://fonts.googleapis.com/css2?family=Handlee&family=Montserrat:wght@400;700&display=swap');
@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.13.1/css/all.min.css');

/*
handlee y montserrat 400, 700
font-family: 'Handlee', cursive;
font-family: 'Montserrat', sans-serif;
*/

/* video --> 15:10 revisar comentarios de Juan Pedro e implementar. Muy buenos*/

* {
    box-sizing: border-box;
    -webkit-box-sizing: border-box;
    -o-box-sizing: border-box;
    -moz-box-sizing: border-box;
    -ms-box-sizing: border-box;
}
/* Vamos a crear variables globales con :root para que sea más sencillo cambiar estilos a varios elementos en repetidas ocasiones. */
:root {
    --color-principal: #fa573a;
    --color-secundario: #21242e;
    --fuentePrincipal: 'Montserrat', sans-serif;
    --fuenteSecundaria: 'Handlee', cursive;
    --anchoMaximo: 1100px;
}

body {
    font-family: var(--fuentePrincipal);
    font-size: 1em;
}

img {
    width: 100%;
    height: auto;
    display: block;
}

.container {
    max-width: var(--anchoMaximo);
    margin: 0 auto;
}

.flex {
    display: flex;
}

/* inicio header */

header .nav_top {
    background-color: var(--color-secundario);
    padding: 20px 10px;
}

header .nav_top a {
    color: white;
    text-decoration: none;
    font-size: 120% /*estoy aumentando un 20% el tamaño de la fuente*/
}

header .nav_top a span {
    display: none;
}

header .nav_top .flex {
    justify-content: space-between;
}

header .nav_top i {
    color: var(--color-principal);
}

header nav {
    padding: 20px;
}

header .logo {
    max-width: 110px;
}

header .hamburguesa {
    width: 50px;
    cursor: pointer;
}

header .hamburguesa div {
    border-top: 2px solid #aaa;
    margin: 10px;
}

header nav .flex {
    flex-wrap: wrap;
    justify-content: space-between;
}

header nav ul {
    width: 100%;
}

header nav ul li a {
    display: block;
    text-align: center;
    text-decoration: none;
    padding: 20px;
    border-bottom: 1px solid #aaa;
    color: #aaa;
    transition: 1s;
}

header nav ul li .activo {
    color: var(--color-principal);
}

header nav ul li a:hover {
    color: var(--color-principal);
}

/* fin header */

/* inicio footer*/

footer {
    background-color: var(--color-secundario);
    padding: 1.250em 0.625em;
    text-align: center;
    position: fixed;
    bottom: 0;
    width: 100%; /* con estas tres últimas reglas fijo el footer siempre abajo */
}

footer p, footer a {
    color: white;
}

footer a:hover {
    text-decoration: none;
}
/* fin footer*/

@media(min-width: 48.000em) /*voy al punto mínimo del siguiente dispositivo*/ {
    header .nav_top a span {
        display: inline;
        }
    footer {
        text-align: left;
    }
}

@media(min-width: 62.750em) {
    header .hamburguesa {
        display: none; /*Oculta pero no ocupa; Tenemos también visibility: hidden --> oculta, pero ocupa; y también opacity: 0;*/
    }

    header nav ul {
        width: auto;
        display: flex;
    }

    header nav ul li a {
        padding: 5px 20px;
        border-bottom: 0px;
    }
}

/* inicio hero*/

.hero {
    background-image: url('../images/fondo.jpg');
    height: 70vh;
    background-repeat: no-repeat; /*para quitar la repetición de la imagen*/
    background-size: cover; /*y con esta propiedad cubre el 100% del contenedor*/
    background-position: center center; /*aquí jugamos con la posición concreta de la imagen, para focalizar en lo que queramos mostrar*/
    background-color: #999; 
    background-blend-mode: multiply;/*para degradar y oscurecer el fondo, fusionando con el color de fondo la imagen. NO utilizamos opacity porque afecta a todo el div, no solo a la imagen del background*/
    display: flex; /*este me alinea la horizontal. centra el único elemento que contiene (container) en el centro del escenario*/

    /*SOLUCIÓN MÁS SIMPLE (video --> 13:25 del 07/07):
    display: flex
    align-items: center
    
    y en .hero .container {
        width: 100% 
        }  --- ¡¡¡con solo tres líneas de código me libro de toda la movida!!! ---
    */
}

.hero .container {
    display: flex; /*este me alinea en la vertical*/
    flex-direction: column; /*reseteo el estado en columna, para que no se me alineen, que es lo que ocurre al introducir flex*/
    justify-content: center;
    width: 90%;
}

.hero h1 {
    font-family: var(--fuenteSecundaria);
    font-size: 2.5em;
    color: white;
}

.hero h2 {
    color: var(--color-principal);
    font-size: 1.5em;
    margin: 1em 0; /*al tener impares si solo uso margin en 2 me completa los demás*/
}

.hero p {
    font-size: 1.15em;
    color: white;
}

/*siempre que haya elementos que se repitan en estilo, no debemos utilizar herencia sino poner una clase concreta para estos elementos, pudiendo repetir tantas veces como aparezca*/ 
.boton {
    display: inline-block; /*colocate en linea comportándote como un bloque*/
    background-color: var(--color-principal);
    color: white;
    padding: 1.15em;
    text-decoration: none;
    margin: 1em 0;
    border: 1px solid var(--color-principal); /*truquito para poner el border que luego se verá en el hover y así que no dé saltos la imagen al hacer scroll*/
}

.boton:hover {
    background-color: transparent;
    color: var(--color-principal);
}

.boton i {
    transition: transform 0.5s; /*si pongo 'transform' solo afecta a la transición (una traslación en este caso)*/
}

.boton:hover i{
    transform: translateX(5px); /*para el efecto de la flecha en el boton*/
    /*transition: 1s; aquí solo afectaría a la ida, no a la vuelta del hover. Habría que atacar al elemento i dentro del boton (ver arriba)*/
}
    
.hero .social li {
    display: inline-block;
    font-size: 2em;
    margin-right: 1em;
    /*el color no va en el li, si no en el a*/
}

.hero .social a {
    color: white;
    text-decoration: none;

}

/* fin hero */
}